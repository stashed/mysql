// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashmysqls.v1.yaml
// installer.stash.appscode.com_stashmysqls.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashmysqlsV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4b\x8f\x1b\x37\x0c\xbe\xfb\x57\x10\xe8\x21\x97\x7a\x8c\x45\x8b\xa2\x98\x5b\xb1\xed\x21\x68\xd2\x47\x1c\xe4\x4e\x6b\x38\x63\x76\x35\x92\x42\x52\x6e\xdd\x5f\x5f\x48\x33\x5e\x3f\xd6\xeb\x76\x17\x8d\x4e\x16\x1f\x9f\xc8\xef\xa3\x34\xc6\xc4\x9f\x48\x94\x63\x68\x01\x13\xd3\x5f\x46\xa1\xec\xb4\x79\xf8\x5e\x1b\x8e\xab\xdd\xdd\xe2\x81\x43\xd7\xc2\x7d\x56\x8b\xe3\x07\xd2\x98\xc5\xd1\x8f\xd4\x73\x60\xe3\x18\x16\x23\x19\x76\x68\xd8\x2e\x00\x9c\x10\x16\xe3\x47\x1e\x49\x0d\xc7\xd4\x42\xc8\xde\x2f\x00\x3c\x6e\xc8\x6b\x89\x01\xc0\x94\x5a\x50\x43\xdd\x2e\x00\x02\x8e\x34\xef\xc6\xbd\x7e\xf6\xda\x70\x50\x43\xef\x49\x9a\x6a\x6d\x30\x25\x75\xb1\xa3\xc6\xc5\x71\xa1\x89\x5c\x41\x19\x24\xe6\xd4\xc2\xcd\xd8\x09\x7c\x3e\xd4\xa1\xd1\x10\x85\x0f\xfb\xe5\x63\x05\xe5\xf7\x21\xaf\x6e\xa7\x86\xd7\xc5\xfd\x7e\xbf\xfe\xfd\x5d\x35\x7a\x56\xfb\xf9\xc2\xf1\x8e\xd5\xaa\x33\xf9\x2c\xe8\xcf\xda\xa8\x76\xe5\x30\x64\x8f\x72\xea\x59\x00\xa8\x8b\x89\x5a\xf8\xa5\x54\x97\xd0\x51\xb7\x00\xd8\x4d\x32\xd4\xea\x96\x33\x2b\xbb\x3b\xf4\x69\x8b\x77\x13\x96\xdb\xd2\x88\x53\xf1\x00\x31\x51\xf8\xe1\xb7\xb7\x9f\xbe\x59\x9f\x99\x01\x92\xc4\x44\x62\x8f\x7d\x4e\xeb\x44\xe7\x13\x2b\x40\x47\xea\x84\x93\xd5\x01\x78\x53\x00\xa7\x28\xe8\x8a\xc0\xa4\x60\x5b\x3a\x94\x46\xdd\x5c\x03\xc4\x1e\x6c\xcb\x0a\x42\x49\x48\x29\x58\x15\xfd\x0c\x18\x4a\x10\x06\x88\x9b\x3f\xc8\x59\x03\x6b\x92\x02\x03\xba\x8d\xd9\x77\xe0\x62\xd8\x91\x18\x08\xb9\x38\x04\xfe\xfb\x11\x5b\xc1\x62\x3d\xd4\xa3\xd1\xcc\xee\x71\x71\x30\x92\x80\x1e\x76\xe8\x33\x7d\x0d\x18\x3a\x18\x71\x0f\x42\xe5\x14\xc8\xe1\x04\xaf\x86\x68\x03\xef\xa3\x10\x70\xe8\x63\x0b\x5b\xb3\xa4\xed\x6a\x35\xb0\x1d\xe6\xdb\xc5\x71\xcc\x81\x6d\xbf\x72\x31\x98\xf0\x26\x5b\x14\x5d\x75\xb4\x23\xbf\x52\x1e\x96\x28\x6e\xcb\x46\xce\xb2\xd0\x0a\x13\x2f\x6b\xe9\xc1\xea\x25\x19\xbb\xaf\x64\xbe\x11\xfa\xe6\xac\x56\xdb\xa7\x3a\xd6\xc2\x61\x38\x71\xd4\xd1\xba\xa1\x40\x99\x30\x60\x05\x9c\x53\xa7\x2e\x8e\x44\x17\x53\x61\xe7\xc3\x4f\xeb\x8f\x70\x38\xba\x8a\x71\xc9\x7e\xe5\xfd\x98\xa8\x47\x09\x0a\x61\x1c\x7a\x92\x49\xc4\x5e\xe2\x58\x31\x29\x74\x29\x72\xb0\xba\x71\x9e\x29\x5c\xd2\xaf\x79\x33\xb2\x15\xdd\x3f\x67\x52\x2b\x5a\x35\x70\x8f\x21\x44\x83\x0d\x41\x4e\x1d\x1a\x75\x0d\xbc\x0d\x70\x8f\x23\xf9\x7b\x54\xfa\xe2\x02\x14\xa6\x75\x59\x88\xfd\x6f\x12\x9c\xbe\x57\x97\xc1\x13\x6b\x27\x8e\xc3\x73\xf3\x8c\x5e\xc7\xa7\x60\x9d\xc8\x15\xe1\x0a\x77\xf3\x2d\xe9\xa3\x4c\x01\x50\x23\xe6\x81\x84\x9e\x3d\x9d\x21\x5e\xbf\xb1\x65\x6d\xd0\x3d\xe4\x74\x69\xbd\x95\x51\x16\xca\x70\xd5\xfe\x2c\x23\x37\x19\x28\xab\xcf\xde\x97\x17\xe9\xd7\x1d\x89\x70\x47\x4f\xd1\x6f\x20\xf3\x88\xc3\x95\x8c\xdb\x3d\x08\x0d\xac\x26\xfb\x57\xf4\x51\x92\x53\x54\xb6\xf8\xca\x74\xc3\xe1\x15\x79\xe5\x4e\xb0\x50\xf7\x34\x75\xf9\xd8\xcd\x55\xd7\xa1\xd6\x2b\x4e\xc3\x17\xc9\xf4\x6a\x89\x84\xd4\xa2\xbc\x58\xa4\xff\x7f\xd0\xfe\x44\xb6\xf2\xdf\x21\x66\x7b\x0a\xdc\x47\x19\xd1\xca\x37\xdf\xbe\xfb\xf6\x19\xd4\xf2\x81\x18\x48\x16\xe7\xdd\x5d\x53\x66\x39\xdf\xae\x0b\x63\x9d\xd6\x0b\xdb\x4c\xcf\x85\xf5\xa4\xd6\x7f\x7f\x49\x9e\x18\xb5\x3c\xc6\x5d\x0b\x26\x79\x02\x2e\x47\x94\x8b\x32\x59\xfe\x09\x00\x00\xff\xff\xe4\x7a\xa8\x0c\x98\x09\x00\x00")

func installerStashAppscodeCom_stashmysqlsV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashmysqlsV1Yaml,
		"installer.stash.appscode.com_stashmysqls.v1.yaml",
	)
}

func installerStashAppscodeCom_stashmysqlsV1Yaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashmysqlsV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashmysqls.v1.yaml", size: 2456, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installerStashAppscodeCom_stashmysqlsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x8f\x1b\x45\x0c\x7e\xcf\x5f\x61\x09\xa4\x02\x62\x13\x4e\x45\x15\xec\x0b\x42\x07\x48\x15\x57\x7e\x34\xa5\x2f\xa7\x22\x39\xb3\xce\xc6\xdc\xec\xcc\xd4\xf6\xa6\xcd\xfd\xf5\x68\x66\x37\xb9\x24\x97\x1c\xbd\x8a\xce\x53\xe6\x1b\xdb\xf3\xf9\xb3\xbd\x19\x4c\xfc\x9a\x44\x39\x86\x1a\x30\x31\xbd\x37\x0a\x79\xa7\xd3\x9b\xef\x74\xca\x71\xb6\xbe\x58\x90\xe1\xc5\xe4\x86\x43\x53\xc3\x65\xaf\x16\xbb\x97\xa4\xb1\x17\x47\x3f\xd1\x92\x03\x1b\xc7\x30\xe9\xc8\xb0\x41\xc3\x7a\x02\xe0\x84\x30\x83\xaf\xb8\x23\x35\xec\x52\x0d\xa1\xf7\x7e\x02\xe0\x71\x41\x5e\xb3\x0d\x00\xa6\x54\x83\x1a\xea\x6a\x02\x10\xb0\xa3\x71\xd7\x6d\xf4\xad\xd7\x29\x07\x35\xf4\x9e\x64\x5a\xd0\x29\xa6\xa4\x2e\x36\x34\x75\xb1\x9b\x68\x22\x97\xa3\xb4\x12\xfb\x54\xc3\x83\xb6\x43\xf0\xf1\x52\x87\x46\x6d\x14\xde\xee\xab\x1d\x83\xfc\x7b\xeb\x57\xb6\x43\xc2\xf3\x7c\xfc\x62\x33\xff\xf3\xaa\x80\x9e\xd5\x7e\x3d\x3a\xb8\x62\xb5\x72\x98\x7c\x2f\xe8\x0f\xd2\x28\xb8\x72\x68\x7b\x8f\xb2\x7f\x32\x01\x48\x42\x4a\xb2\xa6\xbf\xc2\x4d\x88\xef\xc2\x2f\x4c\xbe\xd1\x1a\x96\xe8\x35\x33\x50\x17\x13\xd5\xf0\x5b\x26\x9f\xd0\x51\x33\x01\x58\xa3\xe7\xa6\x68\x3b\xd0\x8f\x89\xc2\x8f\x7f\x3c\x7f\xfd\x74\xee\x56\xd4\xe1\x00\xe6\xc8\x31\x91\xd8\x2e\xcb\x41\xee\x5d\xa1\x77\x18\x40\x43\xea\x84\x53\x89\x08\x4f\x72\xa8\xc1\x06\x9a\x5c\x5a\x52\xb0\x15\xc1\x7a\xc0\xa8\x01\x2d\xd7\x40\x5c\x82\xad\x58\x41\xa8\xe4\x10\xac\x50\xda\x0b\x0b\xd9\x04\x03\xc4\xc5\x3f\xe4\x6c\x0a\xf3\x9c\xa7\x28\xe8\x2a\xf6\xbe\x01\x17\xc3\x9a\xc4\x40\xc8\xc5\x36\xf0\xed\x2e\xb2\x82\xc5\x72\xa5\x47\xa3\x51\xd5\xed\xe2\x60\x24\x01\x7d\x16\xa1\xa7\xaf\x01\x43\x03\x1d\x6e\x40\x28\xdf\x01\x7d\xd8\x8b\x56\x4c\x74\x0a\x2f\xa2\x10\x70\x58\xc6\x1a\x56\x66\x49\xeb\xd9\xac\x65\xdb\xb6\xb6\x8b\x5d\xd7\x07\xb6\xcd\xcc\xc5\x60\xc2\x8b\xde\xa2\xe8\xac\xa1\x35\xf9\x99\x72\x5b\xa1\xb8\x15\x1b\x39\xeb\x85\x66\x98\xb8\x2a\xc4\x83\x95\xf9\xe8\x9a\xcf\x64\x9c\x03\x7d\xb2\xc7\xd4\x36\xa9\xb4\xb2\x70\x68\x77\x70\x69\xa6\xb3\xba\xe7\x8e\x02\x56\xc0\xd1\x6d\xe0\x7f\x27\x6f\x86\xb2\x2a\x2f\x7f\x9e\xbf\x82\xed\xa5\xa5\x04\x87\x9a\x17\xb5\xef\xdc\xf4\x4e\xf8\x2c\x14\x87\x25\xc9\x50\xb8\xa5\xc4\xae\x44\xa4\xd0\xa4\xc8\xc1\xca\xc6\x79\xa6\x70\x28\xba\xf6\x8b\x8e\x2d\x57\xfa\x6d\x4f\x6a\xb9\x3e\x53\xb8\xc4\x10\xa2\xc1\x82\xa0\x4f\x0d\x1a\x35\x53\x78\x1e\xe0\x12\x3b\xf2\x97\xa8\xf4\xc9\x65\xcf\x0a\x6b\x95\x25\xfd\x6f\xe1\xf7\xbf\x4b\xdb\x75\x6a\x3c\xf2\x2a\x1f\xa1\x03\x04\xa0\xc3\xf7\x57\x14\x5a\x5b\xd5\xf0\xec\xe9\xd1\x59\x42\xcb\x2d\x59\xc3\xdf\xd7\x58\xdd\xbe\xf9\xe2\xba\xc2\xea\xf6\x9b\xea\xfb\x37\x5f\x5d\x8f\x3f\xbe\xfc\xe1\xf3\x23\x9f\x93\x24\xb7\xf0\x50\xc0\x1d\xbc\xfd\xca\x9d\x6c\x9a\xbb\xef\xcf\x3c\x91\xcb\xdd\x93\x4b\x38\x0e\xe8\x32\xca\x60\x00\xc5\x62\x9c\x07\x58\xb2\xa7\x0f\xd0\x61\x81\xee\xa6\x4f\xc7\x4a\x9c\xb3\xce\x0b\xa5\x3d\x81\x9e\xcd\xf6\x6c\xc6\x79\x2d\x7b\xef\x73\x25\x7e\x5f\x93\x08\x37\xf7\x2a\x72\x36\x26\x77\xd8\xde\xb3\x7e\x88\xb5\x50\xcb\x6a\xb2\x79\x24\xf3\xec\x98\xa2\xb2\xc5\x8f\x70\x35\x6c\x1f\xe9\x93\x47\x8f\x85\x9a\x63\xb7\x6a\xc7\xff\xc4\xc1\x96\xdf\xbd\x23\xc3\x0f\x2e\xc4\x47\x15\x41\x48\x2d\xca\xa3\xca\xf0\x7f\x36\xcf\x3b\x64\xcb\xcf\x8e\xd8\xdb\x71\xc8\x65\x94\x0e\x2d\x3f\x16\xec\xd9\xb7\x27\xe3\xe5\x7f\x98\x96\x64\xb2\x9f\xcd\x7d\xed\xab\x71\x3e\x0e\xa0\xd2\x7b\x07\xc8\x28\xc4\x01\xb6\xc7\xee\xe1\xd9\x3f\x82\xd6\xdb\x17\xda\xfa\x02\x7d\x5a\xe1\xc5\x1d\x56\x94\xab\xc6\xf7\xd3\xde\x31\x40\x79\x5b\x34\x35\x98\xf4\x03\x8b\xcc\x27\x4f\xc8\x80\xfc\x1b\x00\x00\xff\xff\xc0\x93\x93\x90\xf9\x09\x00\x00")

func installerStashAppscodeCom_stashmysqlsYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashmysqlsYaml,
		"installer.stash.appscode.com_stashmysqls.yaml",
	)
}

func installerStashAppscodeCom_stashmysqlsYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashmysqlsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashmysqls.yaml", size: 2553, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashmysqls.v1.yaml": installerStashAppscodeCom_stashmysqlsV1Yaml,
	"installer.stash.appscode.com_stashmysqls.yaml":    installerStashAppscodeCom_stashmysqlsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashmysqls.v1.yaml": {installerStashAppscodeCom_stashmysqlsV1Yaml, map[string]*bintree{}},
	"installer.stash.appscode.com_stashmysqls.yaml":    {installerStashAppscodeCom_stashmysqlsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
