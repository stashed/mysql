// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashmysqls.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashmysqlsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x8f\x1b\x35\x10\xfe\x9e\x5f\x31\x12\x48\x05\xc4\x6e\x38\x55\x42\xb0\x5f\x10\x3a\x40\xaa\xb8\xf2\xd2\x94\x7e\x39\x15\x69\x62\x4f\x36\xc3\x79\x6d\xd7\x33\x1b\x9a\xfb\xf5\xc8\xde\xdd\xbc\x5d\x72\xf4\x2a\xf0\xa7\xf8\x99\x17\x3f\xf3\xcc\xd8\x59\x8c\xfc\x86\x92\x70\xf0\x0d\x60\x64\x7a\xaf\xe4\xf3\x4e\xea\xbb\x6f\xa4\xe6\x30\xdf\x5c\x2d\x49\xf1\x6a\x76\xc7\xde\x36\x70\xdd\x8b\x86\xee\x15\x49\xe8\x93\xa1\x1f\x68\xc5\x9e\x95\x83\x9f\x75\xa4\x68\x51\xb1\x99\x01\x98\x44\x98\xc1\xd7\xdc\x91\x28\x76\xb1\x01\xdf\x3b\x37\x03\x70\xb8\x24\x27\xd9\x07\x00\x63\x6c\x40\x14\x65\x3d\x03\xf0\xd8\xd1\xb8\xeb\xb6\xf2\xce\x49\xcd\x5e\x14\x9d\xa3\x54\x17\xb4\xc6\x18\xc5\x04\x4b\xb5\x09\xdd\x4c\x22\x99\x9c\xa5\x4d\xa1\x8f\x0d\x3c\xea\x3b\x24\x1f\x0f\x35\xa8\xd4\x86\xc4\xd3\xbe\xda\x31\xc8\xbf\xa7\xb8\xb2\x1d\x0a\x5e\x64\xf3\xcb\xed\xe2\xf7\x9b\x02\x3a\x16\xfd\xf9\xc4\x70\xc3\xa2\xc5\x18\x5d\x9f\xd0\x1d\x95\x51\x70\x61\xdf\xf6\x0e\xd3\xa1\x65\x06\x10\x13\x09\xa5\x0d\xfd\xe1\xef\x7c\xf8\xdb\xff\xc4\xe4\xac\x34\xb0\x42\x27\x99\x81\x98\x10\xa9\x81\x5f\x32\xf9\x88\x86\xec\x0c\x60\x83\x8e\x6d\xd1\x76\xa0\x1f\x22\xf9\xef\x7f\x7b\xf1\xe6\xf9\xc2\xac\xa9\xc3\x01\xcc\x99\x43\xa4\xa4\xbb\x2a\x07\xb9\x77\x8d\xde\x61\x00\x96\xc4\x24\x8e\x25\x23\x3c\xcb\xa9\x06\x1f\xb0\xb9\xb5\x24\xa0\x6b\x82\xcd\x80\x91\x05\x29\xc7\x40\x58\x81\xae\x59\x20\x51\xa9\xc1\x6b\xa1\x74\x90\x16\xb2\x0b\x7a\x08\xcb\xbf\xc8\x68\x0d\x8b\x5c\x67\x12\x90\x75\xe8\x9d\x05\x13\xfc\x86\x92\x42\x22\x13\x5a\xcf\xf7\xbb\xcc\x02\x1a\xca\x91\x0e\x95\x46\x55\xa7\xc5\x5e\x29\x79\x74\x59\x84\x9e\xbe\x04\xf4\x16\x3a\xdc\x42\xa2\x7c\x06\xf4\xfe\x20\x5b\x71\x91\x1a\x5e\x86\x44\xc0\x7e\x15\x1a\x58\xab\x46\x69\xe6\xf3\x96\x75\x1a\x6d\x13\xba\xae\xf7\xac\xdb\xb9\x09\x5e\x13\x2f\x7b\x0d\x49\xe6\x96\x36\xe4\xe6\xc2\x6d\x85\xc9\xac\x59\xc9\x68\x9f\x68\x8e\x91\xab\x42\xdc\x6b\xb9\x1f\x9d\xfd\x24\x8d\xf7\x40\x9e\x1d\x30\xd5\x6d\x2c\xa3\x9c\xd8\xb7\x3b\xb8\x0c\xd3\x45\xdd\xf3\x44\x01\x0b\xe0\x18\x36\xf0\xdf\xcb\x9b\xa1\xac\xca\xab\x1f\x17\xaf\x61\x3a\xb4\xb4\xe0\x58\xf3\xa2\xf6\x3e\x4c\xf6\xc2\x67\xa1\xd8\xaf\x28\x0d\x8d\x5b\xa5\xd0\x95\x8c\xe4\x6d\x0c\xec\xb5\x6c\x8c\x63\xf2\xc7\xa2\x4b\xbf\xec\x58\x73\xa7\xdf\xf5\x24\x9a\xfb\x53\xc3\x35\x7a\x1f\x14\x96\x04\x7d\xb4\xa8\x64\x6b\x78\xe1\xe1\x1a\x3b\x72\xd7\x28\xf4\xbf\xcb\x9e\x15\x96\x2a\x4b\xfa\xef\xc2\x1f\xbe\x4b\xd3\x3a\x77\x3d\xf2\x2a\x8f\xd0\x11\x02\xd0\xe1\xfb\x1b\xf2\xad\xae\x1b\xf8\xfa\xf9\x89\x2d\xa2\xe6\x91\x6c\xe0\xcf\x5b\xac\xee\xdf\x7e\x76\x5b\x61\x75\xff\x55\xf5\xed\xdb\x2f\x6e\xc7\x1f\x9f\x7f\xf7\xe9\x49\xcc\x59\x92\x13\x3c\x34\x70\x07\x4f\xaf\xdc\xd9\xa1\xd9\xbf\x3f\x8b\x48\x26\x4f\x4f\x6e\xe1\x78\x41\x57\x21\x0d\x0e\x50\x3c\xc6\xfb\x00\x2b\x76\xf4\x01\x3a\x2c\xd1\xdc\xf5\xf1\x54\x89\x4b\xde\x79\x61\x6a\xcf\xa0\x17\xab\xbd\x58\x71\x5e\xab\xde\xb9\xdc\x89\x5f\x37\x94\x12\xdb\x07\x1d\xb9\x98\x93\x3b\x6c\x1f\x78\x3f\xc6\x3a\x51\xcb\xa2\x69\xfb\x44\xe6\x39\x30\x06\x61\x0d\x1f\x11\xaa\xd8\x3e\x31\x26\x5f\x3d\x4e\x64\x4f\xc3\xaa\x1d\xff\x33\x86\x89\xdf\x03\x93\xe2\x07\x37\xe2\xa3\x9a\x90\x48\x34\xa4\x27\xb5\xe1\xbf\x1b\x9e\x73\x52\x55\xe3\x38\x1f\x41\x65\x54\x8e\x90\x91\xf7\xe3\x57\xf2\x04\xda\x4c\x1f\x4e\x9b\x2b\x74\x71\x8d\x57\x7b\xac\x14\x54\x8d\x9f\x35\x07\x66\x80\xf2\x97\x6f\x1b\xd0\xd4\x0f\xa7\xe5\x73\xf3\xe0\x0e\xc8\x3f\x01\x00\x00\xff\xff\xab\xe8\xc1\xdb\x90\x09\x00\x00")

func installerStashAppscodeCom_stashmysqlsYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashmysqlsYaml,
		"installer.stash.appscode.com_stashmysqls.yaml",
	)
}

func installerStashAppscodeCom_stashmysqlsYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashmysqlsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashmysqls.yaml", size: 2448, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashmysqls.yaml": installerStashAppscodeCom_stashmysqlsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashmysqls.yaml": &bintree{installerStashAppscodeCom_stashmysqlsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
