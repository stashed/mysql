// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashmysqls.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashmysqlsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xdd\x8f\x1b\x35\x10\x7f\xcf\x5f\x31\x12\x48\x05\xc4\x6e\x38\x55\x42\xb0\x2f\x08\x1d\x20\x55\x5c\xf9\x68\x4a\x5f\x4e\x45\x9a\xd8\x93\xcd\x70\x5e\xdb\xf5\xcc\x86\xe6\xfe\x7a\x64\xef\x6e\xbe\x2e\x39\xe8\x09\x84\x9f\xd6\xbf\xf9\xfe\xcd\x8c\xb5\x18\xf9\x0d\x25\xe1\xe0\x1b\xc0\xc8\xf4\x5e\xc9\xe7\x9b\xd4\x77\x5f\x49\xcd\x61\xbe\xb9\x5a\x92\xe2\xd5\xec\x8e\xbd\x6d\xe0\xba\x17\x0d\xdd\x2b\x92\xd0\x27\x43\xdf\xd1\x8a\x3d\x2b\x07\x3f\xeb\x48\xd1\xa2\x62\x33\x03\x30\x89\x30\x83\xaf\xb9\x23\x51\xec\x62\x03\xbe\x77\x6e\x06\xe0\x70\x49\x4e\xb2\x0e\x00\xc6\xd8\x80\x28\xca\x7a\x06\xe0\xb1\xa3\xf1\xd6\x6d\xe5\x9d\x93\x9a\xbd\x28\x3a\x47\xa9\x2e\x68\x8d\x31\x8a\x09\x96\x6a\x13\xba\x99\x44\x32\xd9\x4b\x9b\x42\x1f\x1b\x78\x54\x77\x70\x3e\x06\x35\xa8\xd4\x86\xc4\xd3\xbd\xda\x65\x90\xbf\x27\xbb\x72\x1d\x0a\x5e\x64\xf1\xcb\xed\xe2\xd7\x9b\x02\x3a\x16\xfd\xf1\x44\x70\xc3\xa2\x45\x18\x5d\x9f\xd0\x1d\x95\x51\x70\x61\xdf\xf6\x0e\xd3\xa1\x64\x06\x10\x13\x09\xa5\x0d\xfd\xe6\xef\x7c\xf8\xd3\xff\xc0\xe4\xac\x34\xb0\x42\x27\x39\x03\x31\x21\x52\x03\x3f\xe5\xe4\x23\x1a\xb2\x33\x80\x0d\x3a\xb6\x85\xdb\x21\xfd\x10\xc9\x7f\xfb\xcb\x8b\x37\xcf\x17\x66\x4d\x1d\x0e\x60\xf6\x1c\x22\x25\xdd\x55\x39\xd0\xbd\x6b\xf4\x0e\x03\xb0\x24\x26\x71\x2c\x1e\xe1\x59\x76\x35\xe8\x80\xcd\xad\x25\x01\x5d\x13\x6c\x06\x8c\x2c\x48\x09\x03\x61\x05\xba\x66\x81\x44\xa5\x06\xaf\x25\xa5\x03\xb7\x90\x55\xd0\x43\x58\xfe\x41\x46\x6b\x58\xe4\x3a\x93\x80\xac\x43\xef\x2c\x98\xe0\x37\x94\x14\x12\x99\xd0\x7a\xbe\xdf\x79\x16\xd0\x50\x42\x3a\x54\x1a\x59\x9d\x0e\x7b\xa5\xe4\xd1\x65\x12\x7a\xfa\x1c\xd0\x5b\xe8\x70\x0b\x89\x72\x0c\xe8\xfd\x81\xb7\xa2\x22\x35\xbc\x0c\x89\x80\xfd\x2a\x34\xb0\x56\x8d\xd2\xcc\xe7\x2d\xeb\x34\xda\x26\x74\x5d\xef\x59\xb7\x73\x13\xbc\x26\x5e\xf6\x1a\x92\xcc\x2d\x6d\xc8\xcd\x85\xdb\x0a\x93\x59\xb3\x92\xd1\x3e\xd1\x1c\x23\x57\x25\x71\xaf\x65\x3f\x3a\xfb\x51\x1a\xf7\x40\x9e\x1d\x64\xaa\xdb\x58\x46\x39\xb1\x6f\x77\x70\x19\xa6\x8b\xbc\xe7\x89\x02\x16\xc0\xd1\x6c\xc8\x7f\x4f\x6f\x86\x32\x2b\xaf\xbe\x5f\xbc\x86\x29\x68\x69\xc1\x31\xe7\x85\xed\xbd\x99\xec\x89\xcf\x44\xb1\x5f\x51\x1a\x1a\xb7\x4a\xa1\x2b\x1e\xc9\xdb\x18\xd8\x6b\xb9\x18\xc7\xe4\x8f\x49\x97\x7e\xd9\xb1\xe6\x4e\xbf\xeb\x49\x34\xf7\xa7\x86\x6b\xf4\x3e\x28\x2c\x09\xfa\x68\x51\xc9\xd6\xf0\xc2\xc3\x35\x76\xe4\xae\x51\xe8\x3f\xa7\x3d\x33\x2c\x55\xa6\xf4\xef\x89\x3f\x7c\x97\xa6\x73\x6e\x3d\xf2\x29\x8f\xd0\x11\x02\xd0\xe1\xfb\x1b\xf2\xad\xae\x1b\xf8\xf2\xf9\x89\x2c\xa2\xe6\x91\x6c\xe0\xf7\x5b\xac\xee\xdf\x7e\x72\x5b\x61\x75\xff\x45\xf5\xf5\xdb\xcf\x6e\xc7\x8f\x4f\xbf\xf9\xf8\xc4\xe6\x6c\x92\x13\x3c\x34\x70\x07\x4f\xaf\xdc\xd9\xa1\xd9\xbf\x3f\x8b\x48\x26\x4f\x4f\x6e\xe1\xb8\xa0\xab\x90\x06\x05\x28\x1a\xe3\x3e\xc0\x8a\x1d\xfd\x03\x1e\x96\x68\xee\xfa\x78\xca\xc4\x25\xed\x7c\x30\xb5\x67\xd0\x8b\xd5\xe6\x93\x27\x8a\x13\xd9\x53\xb3\xaa\x38\x3b\xcb\xda\x09\x3d\xf9\xac\x7a\xe7\x72\xdb\x7e\xde\x50\x4a\x6c\x1f\xb4\xef\x62\x02\xdc\x61\xfb\x40\xfb\xb1\x12\x13\xb5\x2c\x9a\xb6\x1f\x58\x66\x36\x8c\x41\x58\xc3\x13\x4c\x15\xdb\x7f\x8d\xd5\x29\xff\x33\x82\x29\xbf\x07\x22\xc5\x53\xff\x17\x1b\xf1\xa4\x26\x24\x12\x0d\xe9\x83\xda\xf0\x3f\x4d\xda\x39\x1f\xd5\xb8\x28\x47\x50\x99\xab\x23\x64\x2c\xf2\xf1\x65\x3f\x81\x36\xd3\x2f\xd9\xe6\x0a\x5d\x5c\xe3\xd5\x1e\x2b\xd5\x57\xe3\x0f\xd3\x81\x18\xa0\xfc\x4c\xd8\x06\x34\xf5\x43\xb4\x1c\x37\x4f\xf9\x80\xfc\x15\x00\x00\xff\xff\x74\xf5\x1d\x6c\xea\x09\x00\x00")

func installerStashAppscodeCom_stashmysqlsYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashmysqlsYaml,
		"installer.stash.appscode.com_stashmysqls.yaml",
	)
}

func installerStashAppscodeCom_stashmysqlsYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashmysqlsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashmysqls.yaml", size: 2538, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashmysqls.yaml": installerStashAppscodeCom_stashmysqlsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashmysqls.yaml": &bintree{installerStashAppscodeCom_stashmysqlsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
